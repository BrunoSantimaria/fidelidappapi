const { GoogleGenerativeAI } = require("@google/generative-ai");

// Configuraci칩n del API Key para Google Generative AI
const api_gemini = process.env.API_GEMINI;

if (!api_gemini) {
  console.error("No se encontr칩 la API_GEMINI en las variables de entorno.");
  throw new Error("API_GEMINI no est치 configurada.");
}

// Inicializar el cliente de Generative AI
const genAI = new GoogleGenerativeAI(api_gemini);

const system_instruct =
  "Eres un asistente virtual amigable de un restaurante. Usa esta informaci칩n para responder preguntas sobre los platos, hacer recomendaciones y ayudar a los clientes. " +
  "Si te preguntan por el plato del d칤a, recomienda uno de los platos principales al azar. Si te preguntan por ingredientes espec칤ficos o informaci칩n que no est치 en el men칰, " +
  "indica amablemente que solo puedes proporcionar la informaci칩n que est치 en el men칰. Mant칠n las respuestas concisas y amigables. Responde en espa침ol y refiriendote por el nombre.";

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash-8b",
  systemInstruction: system_instruct,
});

/**
 * Generar una respuesta del chatbot utilizando Google Generative AI.
 */
exports.generateResponse = async (req, res) => {
  try {
    const { client_data, message, info } = req.body;

    // Validar los campos requeridos
    if (!client_data || !message) {
      return res.status(400).json({
        error: "Faltan datos necesarios en la solicitud. Aseg칰rate de incluir 'client_data' y 'message'.",
      });
    }

    // Opcionalmente incluir el men칰 si est치 disponible
    const client_data_json = JSON.stringify(client_data);
    const menu_json = info?.menu ? JSON.stringify(info.menu) : "Men칰 no disponible.";

    const prompt = `${message}\nInformaci칩n del cliente: ${client_data_json}\nMen칰: ${menu_json}`;

    console.log("游댳 Generando respuesta con el prompt:", prompt);

    // Generar contenido utilizando el modelo
    const result = await model.generateContent(prompt);

    // Log completo para depuraci칩n
    console.log("Respuesta completa de la API:", JSON.stringify(result, null, 2));

    // Verificar si la estructura de la respuesta es v치lida
    if (!result || !result.response || !result.response.candidates || result.response.candidates.length === 0) {
      console.error("La API no devolvi칩 candidatos v치lidos.");
      return res.status(500).json({
        error: "No se pudo generar una respuesta v치lida desde el modelo.",
      });
    }

    // Llamar a la funci칩n `.text()` para obtener el contenido generado
    const responseText = await result.response.text();

    return res.status(200).json({ response: responseText });
  } catch (error) {
    console.error("Error generando la respuesta del chatbot:", error);
    return res.status(500).json({
      error: "Ocurri칩 un error al generar la respuesta del chatbot.",
      details: error.message,
    });
  }
};
